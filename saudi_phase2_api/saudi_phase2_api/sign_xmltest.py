import frappe
frappe.init(site="dev.erpgulf.com")
frappe.connect()
from subprocess import call
import subprocess
import requests
import json
import base64
import sys
import OpenSSL
import chilkat2
success = True
sbXml = chilkat2.StringBuilder()
success = sbXml.LoadFile("/opt/oxy/frappe-bench/apps/saudi_phase2_api/saudi_phase2_api/saudi_phase2_api/test_chilkat.xml","utf-8")
if (success == False):
    print("Failed to load XML file to be signed.")
    sys.exit()
gen = chilkat2.XmlDSigGen()

gen.SigLocation = "Invoice|ext:UBLExtensions|ext:UBLExtension|ext:ExtensionContent|sig:UBLDocumentSignatures|sac:SignatureInformation"
gen.SigLocationMod = 0
gen.SigId = "signature"
gen.SigNamespacePrefix = "ds"
gen.SigNamespaceUri = "http://www.w3.org/2000/09/xmldsig#"
gen.SignedInfoCanonAlg = "C14N_11"
gen.SignedInfoDigestMethod = "sha256"
object1 = chilkat2.Xml()
object1.Tag = "xades:QualifyingProperties"
object1.AddAttribute("xmlns:xades","http://uri.etsi.org/01903/v1.3.2#")
object1.AddAttribute("Target","signature")
object1.UpdateAttrAt("xades:SignedProperties",True,"Id","xadesSignedProperties")
object1.UpdateChildContent("xades:SignedProperties|xades:SignedSignatureProperties|xades:SigningTime","TO BE GENERATED BY CHILKAT")
object1.UpdateAttrAt("xades:SignedProperties|xades:SignedSignatureProperties|xades:SigningCertificate|xades:Cert|xades:CertDigest|ds:DigestMethod",True,"Algorithm","http://www.w3.org/2001/04/xmlenc#sha256")
object1.UpdateChildContent("xades:SignedProperties|xades:SignedSignatureProperties|xades:SigningCertificate|xades:Cert|xades:CertDigest|ds:DigestValue","TO BE GENERATED BY CHILKAT")
object1.UpdateChildContent("xades:SignedProperties|xades:SignedSignatureProperties|xades:SigningCertificate|xades:Cert|xades:IssuerSerial|ds:X509IssuerName","TO BE GENERATED BY CHILKAT")
object1.UpdateChildContent("xades:SignedProperties|xades:SignedSignatureProperties|xades:SigningCertificate|xades:Cert|xades:IssuerSerial|ds:X509SerialNumber","TO BE GENERATED BY CHILKAT")
gen.AddObject("",object1.GetXml(),"","")
xml1 = chilkat2.Xml()
xml1.Tag = "ds:Transforms"
xml1.UpdateAttrAt("ds:Transform",True,"Algorithm","http://www.w3.org/TR/1999/REC-xpath-19991116")
xml1.UpdateChildContent("ds:Transform|ds:XPath","not(//ancestor-or-self::ext:UBLExtensions)")
xml1.UpdateAttrAt("ds:Transform[1]",True,"Algorithm","http://www.w3.org/TR/1999/REC-xpath-19991116")
xml1.UpdateChildContent("ds:Transform[1]|ds:XPath","not(//ancestor-or-self::cac:Signature)")
xml1.UpdateAttrAt("ds:Transform[2]",True,"Algorithm","http://www.w3.org/TR/1999/REC-xpath-19991116")
xml1.UpdateChildContent("ds:Transform[2]|ds:XPath","not(//ancestor-or-self::cac:AdditionalDocumentReference[cbc:ID='QR'])")
xml1.UpdateAttrAt("ds:Transform[3]",True,"Algorithm","http://www.w3.org/2006/12/xml-c14n11")
gen.AddSameDocRef2("","sha256",xml1,"")
gen.SetRefIdAttr("","invoiceSignedData")
gen.AddObjectRef("xadesSignedProperties","sha256","","","http://www.w3.org/2000/09/xmldsig#SignatureProperties")
def create_PFX():
    subprocess.run(["openssl", "req", "-newkey", "rsa:2048", "-nodes", "-keyout", "myprivatekey.key", "-out", "mycsr.csr"])
    subprocess.run(["openssl", "x509", "-req", "-in", "mycsr.csr", "-signkey", "myprivatekey.key", "-out", "mycertificate.crt"])
    subprocess.run(["openssl", "pkcs12", "-export", "-out", "mycert.pfx", "-inkey", "myprivatekey.key", "-in", "mycertificate.crt"])
# create_PFX()
certFromPfx = chilkat2.Cert()
success = certFromPfx.LoadPfxFile("/opt/oxy/frappe-bench/sites/mycert.pfx","Friday2000@T")
if (success != True):
    print(certFromPfx.LastErrorText)
    sys.exit()
else:
    print("success")
success = gen.SetX509Cert(certFromPfx,True)
if (success != True):
    print(gen.LastErrorText)
    sys.exit()
gen.KeyInfoType = "X509Data"
gen.X509Type = "Certificate"
gen.Behaviors = "IndentedSignature,TransformSignatureXPath,ZATCA"
success = gen.CreateXmlDSigSb(sbXml)
if (success != True):
    print(gen.LastErrorText)
    sys.exit()
# else:
#     print("success 69")
success = sbXml.WriteFile("signedXml.xml","utf-8",False)
print(sbXml.GetAsString())
verifier = chilkat2.XmlDSig()
success = verifier.LoadSignatureSb(sbXml)
if (success != True):
    print(verifier.LastErrorText)
    sys.exit()
verifier.UncommonOptions = "ZATCA"
numSigs = verifier.NumSignatures
verifyIdx = 0
while verifyIdx < numSigs :
    verifier.Selector = verifyIdx
    verified = verifier.VerifySignature(True)
    if (verified != True):
        print(verifier.LastErrorText)
        sys.exit()
    verifyIdx = verifyIdx + 1
print("All signatures were successfully verified.")

sellerName = "Firoz Ashraf"
vatNumber = "1234567891"
timeStamp = "2021-11-17 08:30:00"
invoiceTotal = "100.00"
vatTotal = "15.00"
bdTlv = chilkat2.BinData()
charset = "utf-8"
tag = 1
bdTlv.AppendByte(tag)
bdTlv.AppendCountedString(1,False,sellerName,charset)
tag = tag + 1
# This is tag 2
bdTlv.AppendByte(tag)
bdTlv.AppendCountedString(1,False,vatNumber,charset)
tag = tag + 1
# This is tag 3
bdTlv.AppendByte(tag)
bdTlv.AppendCountedString(1,False,timeStamp,charset)
tag = tag + 1
# This is tag 4
bdTlv.AppendByte(tag)
bdTlv.AppendCountedString(1,False,invoiceTotal,charset)
tag = tag + 1
# This is tag 5
bdTlv.AppendByte(tag)
bdTlv.AppendCountedString(1,False,vatTotal,charset)
signedXmlFilePath = "/opt/oxy/frappe-bench/sites/signedXml.xml"
xmlSigned = chilkat2.Xml()
success = xmlSigned.LoadXmlFile(signedXmlFilePath)
if (success == False):
    print(xmlSigned.LastErrorText)
    sys.exit()
else:
    print("success 120")
sbDigestValue = chilkat2.StringBuilder()
success = xmlSigned.GetChildContentSb("ext:UBLExtensions|ext:UBLExtension|ext:ExtensionContent|sig:UBLDocumentSignatures|sac:SignatureInformation|ds:Signature|ds:SignedInfo|ds:Reference[0]|ds:DigestValue",sbDigestValue)
if (success == False):
    print("Failed to get DigestValue from signed XML.")
    sys.exit()
print("DigestValue = " + sbDigestValue.GetAsString())
tag = 6
bdTlv.AppendByte(tag)
bdTlv.AppendByte(sbDigestValue.Length)
bdTlv.AppendSb(sbDigestValue,"utf-8")
sbSignatureValue = chilkat2.StringBuilder()
success = xmlSigned.GetChildContentSb("ext:UBLExtensions|ext:UBLExtension|ext:ExtensionContent|sig:UBLDocumentSignatures|sac:SignatureInformation|ds:Signature|ds:SignatureValue",sbSignatureValue)
if (success == False):
    print("Failed to get SignatureValue from signed XML.")
    sys.exit()
print("SignatureValue = " + sbSignatureValue.GetAsString())
tag = 7
bdTlv.AppendByte(tag)
bdTlv.AppendByte(sbSignatureValue.Length)
bdTlv.AppendSb(sbSignatureValue,"utf-8")
x509Certificate = xmlSigned.GetChildContent("ext:UBLExtensions|ext:UBLExtension|ext:ExtensionContent|sig:UBLDocumentSignatures|sac:SignatureInformation|ds:Signature|ds:KeyInfo|ds:X509Data|ds:X509Certificate")
if (xmlSigned.LastMethodSuccess == False):
    print("Failed to get X509Certificate from the signed XML.")
    sys.exit()

cert = chilkat2.Cert()
success = cert.SetFromEncoded(x509Certificate)
if (success == False):
    print("Failed to load signing certificate from base64.")
    sys.exit()
bdPubKey = chilkat2.BinData()
success = cert.GetPubKeyDer(True,bdPubKey)
if (success == False):
    print("Failed to get certificate's public key.")
    sys.exit()
tag = 8
bdTlv.AppendByte(tag)
bdTlv.AppendByte(bdPubKey.NumBytes)
bdTlv.AppendBd(bdPubKey)
print("Certificate public key:")
print(bdPubKey.GetEncoded("base64"))
bdCertSig = chilkat2.BinData()
success = cert.GetSignature(bdCertSig)
if (success == False):
    print("Failed to get certificate's signature.")
    sys.exit()
# else:
#     print("success 168")
tag = 9
bdTlv.AppendByte(tag)
bdTlv.AppendByte(bdCertSig.NumBytes)
bdTlv.AppendBd(bdCertSig)
print("Certificate signature:")
print(bdCertSig.GetEncoded("hex"))
qr_base64 = bdTlv.GetEncoded("base64")
print("QR: " + qr_base64)

xmlQR = chilkat2.Xml()
xmlQR.Tag = "cac:AdditionalDocumentReference"
xmlQR.UpdateChildContent("cbc:ID","QR")
xmlQR.UpdateAttrAt("cac:Attachment|cbc:EmbeddedDocumentBinaryObject",True,"mimeCode","text/plain")
xmlQR.UpdateChildContent("cac:Attachment|cbc:EmbeddedDocumentBinaryObject",bdTlv.GetEncoded("base64"))
sbSignedXml = chilkat2.StringBuilder()
success = sbSignedXml.LoadFile(signedXmlFilePath,"utf-8")
if (success == False):
    print("Failed to load previously signed XML file.")
    sys.exit()

sbReplaceStr = chilkat2.StringBuilder()
xmlQR.EmitXmlDecl = False
xmlQR.EmitCompact = True
sbReplaceStr.Append(xmlQR.GetXml())
sbReplaceStr.Append("<cac:Signature>")
success = sbSignedXml.ReplaceFirst("<cac:Signature>",sbReplaceStr.GetAsString())
if (success == False):
    print("Did not find <cac:Signature> in the signed XML")
    sys.exit()
success = sbSignedXml.WriteFile("signedXML_withQR.xml","utf-8",False)
verifier = chilkat2.XmlDSig()
success = verifier.LoadSignatureSb(sbSignedXml)
if (success != True):
    print(verifier.LastErrorText)
    sys.exit()
# else:
#     print("success 205")
verifier.UncommonOptions = "ZATCA"

numSigs = verifier.NumSignatures
verifyIdx = 0
while verifyIdx < numSigs :
    verifier.Selector = verifyIdx
    verified = verifier.VerifySignature(True)
    if (verified != True):
        print(verifier.LastErrorText)
        sys.exit()

    verifyIdx = verifyIdx + 1

print("All signatures were successfully verified.")
otp = "123345"


pem = chilkat2.Pem()
success = pem.LoadPemFile("mycscsr2.csr","")
if (success == False):
    print(pem.LastErrorText)
    sys.exit()
# else:
#     print("success 228")
# sbCsrBase64 = chilkat2.StringBuilder()
# sbCsrBase64.Append(pem.GetEncodedItem("csr","","base64",0))
# numReplaced = sbCsrBase64.Replace("\r","")
# numReplaced = sbCsrBase64.Replace("\n","")
# csrBase64 = sbCsrBase64.GetAsString()
# print(csrBase64)

# json = chilkat2.JsonObject()
# json.EmitCompact = False
# json.UpdateSb("csr",sbCsrBase64)

# http = chilkat2.Http()
# http.Accept = "application/json"
# http.SetRequestHeader("OTP",otp)
# http.SetRequestHeader("Accept-Version","V2")
# # resp is a CkHttpResponse
# resp = http.PostJson3("https://gw-fatoora.zatca.gov.sa/e-invoicing/developer-portal/compliance","application/json",json)
# if (http.LastMethodSuccess == False):
#     print(http.LastErrorText)
#     sys.exit()
# if (resp.StatusCode != 200):
#     print(resp.BodyStr)
#     print("response status code = " + str(resp.StatusCode))
#     print("Failed")
#     sys.exit()
# jsonResp = chilkat2.JsonObject()
# resp.GetBodyJson(jsonResp)
# jsonResp.EmitCompact = False
# print("JSON response:")
# print(jsonResp.Emit())
def test_Csr_Call():
    certi=""
    try:
        with open("/opt/oxy/frappe-bench/sites/mycscsr2.csr", "r") as f:
            csr_contents = f.read()
    except Exception as e:
        print(str(e))
    csr = base64.b64encode(csr_contents.encode("utf-8")).decode("utf-8")
    print(csr)
    url = "https://gw-fatoora.zatca.gov.sa/e-invoicing/developer-portal/compliance"
    payload = json.dumps({
        "csr": csr
#   "csr": "LS0tLS1CRUdJTiBDRVJUSUZJQ0FURSBSRVFVRVNULS0tLS0KTUlJQnl6Q0NBWElDQVFBd1R6RUxNQWtHQTFVRUJoTUNVMEV4RnpBVkJnTlZCQXNNRG1GdGJXRnVJRUp5WVc1agphR05vTVJNd0VRWURWUVFLREFwb1lYbGhJSGxoWnlBek1SSXdFQVlEVlFRRERBa3hNamN1TUM0d0xqRXdWakFRCkJnY3Foa2pPUFFJQkJnVXJnUVFBQ2dOQ0FBVGJpclluL3l2L09zSGhGbE1QdkZjUnhJM250dWsxaXd0aWxOWXUKVjIrOTVrbkRBc2hiNU9Gc0lZQ0hvL2tMMDBLdnhMczQrcytyMWc4dnFVZ3BvazhYb0lIRE1JSEFCZ2txaGtpRwo5dzBCQ1E0eGdiSXdnYTh3SkFZSkt3WUJCQUdDTnhRQ0JCY1RGVlJUVkZwQlZFTkJMVU52WkdVdFUybG5ibWx1Clp6Q0JoZ1lEVlIwUkJIOHdmYVI3TUhreEd6QVpCZ05WQkFRTUVqRXRhR0Y1WVh3eUxUSXpOSHd6TFRNMU5ERWYKTUIwR0NnbVNKb21UOGl4a0FRRU1Eek14TURFM05UTTVOelF3TURBd016RU5NQXNHQTFVRURBd0VNVEV3TURFUQpNQTRHQTFVRUdnd0hXbUYwWTJFZ016RVlNQllHQTFVRUR3d1BSbTl2WkNCQ2RYTnphVzVsYzNNek1Bb0dDQ3FHClNNNDlCQU1DQTBjQU1FUUNJQ3JyTzdtSzZWZTZNTmIrSlNJRkRmK0FGMjhqV2ZJYTNIdzlhWEdVOS9KbkFpQXIKSnBVc0h4Z1RrOGtQZTRQSnNJVGJJYXlTeUh2emZwdHFFTWZEajdQN2F3PT0KLS0tLS1FTkQgQ0VSVElGSUNBVEUgUkVRVUVTVC0tLS0t"
})
    headers = {
    'accept': 'application/json',
    'OTP': '123345',
    'Accept-Version': 'V2',
    'Content-Type': 'application/json',
    'Cookie': 'TS0106293e=0132a679c0cbe1d2e650bfa4edfb5b9fba7c2402f067231cb8cbd5a18c04122f96219697ee10a8cb24baba0adc0295606af7f5510f'
}
    response = requests.request("POST", url, headers=headers, data=payload)
    print(response.text)
test_Csr_Call()

# def clearance_API(base64Invoice):

#     url = "https://gw-fatoora.zatca.gov.sa/e-invoicing/developer-portal/compliance/invoices"

#     payload = json.dumps({
#     "invoiceHash": "sLN3WJHO1isrR9o1aQa9Sa5Iz/0ljHID45QOQuF+QBw=",
#     "uuid": "3cf5ee18-ee25-44ea-a444-2c37ba7f28be",
#     "invoice": base64Invoice
#     })
#     headers = {
#         'accept': 'application/json',
#         'Accept-Language': 'en',
#         'Accept-Version': 'V2',
#         'Authorization': 'Basic VFVsSlJERnFRME5CTTNsblFYZEpRa0ZuU1ZSaWQwRkJaVFJUYUhOMmVXNDNNREo1VUhkQlFrRkJRamRvUkVGTFFtZG5jV2hyYWs5UVVWRkVRV3BDYWsxU1ZYZEZkMWxMUTFwSmJXbGFVSGxNUjFGQ1IxSlpSbUpIT1dwWlYzZDRSWHBCVWtKbmIwcHJhV0ZLYXk5SmMxcEJSVnBHWjA1dVlqTlplRVo2UVZaQ1oyOUthMmxoU21zdlNYTmFRVVZhUm1ka2JHVklVbTVaV0hBd1RWSjNkMGRuV1VSV1VWRkVSWGhPVlZVeGNFWlRWVFZYVkRCc1JGSlRNVlJrVjBwRVVWTXdlRTFDTkZoRVZFbDVUVVJaZUUxNlJURk5la1V3VG14dldFUlVTVEJOUkZsNFRXcEZNVTE2UlRCT2JHOTNVMVJGVEUxQmEwZEJNVlZGUW1oTlExVXdSWGhFYWtGTlFtZE9Wa0pCYjFSQ1YwWnVZVmQ0YkUxU1dYZEdRVmxFVmxGUlRFVjNNVzlaV0d4b1NVaHNhRm95YUhSaU0xWjVUVkpKZDBWQldVUldVVkZFUlhkcmVFMXFZM1ZOUXpSM1RHcEZkMVpxUVZGQ1oyTnhhR3RxVDFCUlNVSkNaMVZ5WjFGUlFVTm5Ua05CUVZSVVFVczViSEpVVm10dk9YSnJjVFphV1dOak9VaEVVbHBRTkdJNVV6UjZRVFJMYlRkWldFb3JjMjVVVm1oTWEzcFZNRWh6YlZOWU9WVnVPR3BFYUZKVVQwaEVTMkZtZERoREwzVjFWVms1TXpSMmRVMU9ielJKUTB0cVEwTkJhVmwzWjFselIwRXhWV1JGVVZOQ1ozcERRbWRMVWl0TlNIZDRTRlJCWWtKblRsWkNRVkZOUmtSRmRHRkhSalZaV0hkNVRGUkplazVJZDNwTVZFVjRUV3BOZWsxU09IZElVVmxMUTFwSmJXbGFVSGxNUjFGQ1FWRjNVRTE2VFhoTlZGbDVUMFJaTlU1RVFYZE5SRUY2VFZFd2QwTjNXVVJXVVZGTlJFRlJlRTFVUVhkTlVrVjNSSGRaUkZaUlVXRkVRV2hoV1ZoU2FsbFRRWGhOYWtWWlRVSlpSMEV4VlVWRWQzZFFVbTA1ZGxwRFFrTmtXRTU2WVZjMWJHTXpUWHBOUWpCSFFURlZaRVJuVVZkQ1FsTm5iVWxYUkRaaVVHWmlZa3RyYlZSM1QwcFNXSFpKWWtnNVNHcEJaa0puVGxaSVUwMUZSMFJCVjJkQ1VqSlpTWG8zUW5GRGMxb3hZekZ1WXl0aGNrdGpjbTFVVnpGTWVrSlBRbWRPVmtoU09FVlNla0pHVFVWUFoxRmhRUzlvYWpGdlpFaFNkMDlwT0haa1NFNHdXVE5LYzB4dWNHaGtSMDVvVEcxa2RtUnBOWHBaVXpsRVdsaEtNRkpYTlhsaU1uaHpUREZTVkZkclZrcFViRnBRVTFWT1JreFdUakZaYTA1Q1RGUkZkVmt6U25OTlNVZDBRbWRuY2tKblJVWkNVV05DUVZGVFFtOUVRMEp1VkVKMVFtZG5ja0puUlVaQ1VXTjNRVmxhYVdGSVVqQmpSRzkyVEROU2VtUkhUbmxpUXpVMldWaFNhbGxUTlc1aU0xbDFZekpGZGxFeVZubGtSVloxWTIwNWMySkRPVlZWTVhCR1lWYzFNbUl5YkdwYVZrNUVVVlJGZFZwWWFEQmFNa1kyWkVNMWJtSXpXWFZpUnpscVdWZDRabFpHVG1GU1ZXeFBWbXM1U2xFd1ZYUlZNMVpwVVRCRmRFMVRaM2hMVXpWcVkyNVJkMHQzV1VsTGQxbENRbEZWU0UxQlIwZElNbWd3WkVoQk5reDVPVEJqTTFKcVkyMTNkV1Z0UmpCWk1rVjFXakk1TWt4dVRtaE1NamxxWXpOQmQwUm5XVVJXVWpCUVFWRklMMEpCVVVSQloyVkJUVUl3UjBFeFZXUktVVkZYVFVKUlIwTkRjMGRCVVZWR1FuZE5RMEpuWjNKQ1owVkdRbEZqUkVGNlFXNUNaMnR5UW1kRlJVRlpTVE5HVVc5RlIycEJXVTFCYjBkRFEzTkhRVkZWUmtKM1RVTk5RVzlIUTBOelIwRlJWVVpDZDAxRVRVRnZSME5EY1VkVFRUUTVRa0ZOUTBFd1owRk5SVlZEU1ZGRVQxQXdaakJFY21oblpVUlVjbFpNZEVwMU9HeFhhelJJU25SbFkyWTFabVpsVWt4blpVUTRZMlZWWjBsblpFSkNUakl4U1RNM2FYTk5PVlZ0VTFGbE9IaFNjRWh1ZDA5NFNXYzNkMDR6V1RKMlZIQnpVR2hhU1QwPTpFcGo2OUdoOFRNTXpZZktsdEx2MW9tWktyaWUwc1A2TEF2YW1iUUZIVGd3PQ==',
#         'Content-Type': 'application/json',
#         'Cookie': 'TS0106293e=0132a679c0ab87cc5b9e512a7a23c734b5329487c64834144dc344250a019df016f84525d40289176d801a99c6873fbad64a3a3786; TS0106293e=0132a679c0c62d1982020a8a7caf2ff0cc801be34fadff5cec131d5e1861e6becd54583ae02120859270eceeb0ba9e9216ddb873bc'
# }

#     response = requests.request("POST", url, headers=headers, data=payload)

#     print(response.text)

signedXmlFilePath = "/opt/oxy/frappe-bench/sites/signedXml.xml"
signedXml = chilkat2.Xml()
success = signedXml.LoadXmlFile(signedXmlFilePath)
if (success == False):
    print(signedXml.LastErrorText)
    sys.exit()
invoiceHash = signedXml.GetChildContent("ext:UBLExtensions|ext:UBLExtension|ext:ExtensionContent|sig:UBLDocumentSignatures|sac:SignatureInformation|ds:Signature|ds:SignedInfo|ds:Reference[0]|ds:DigestValue")
print("invoiceHash: " + invoiceHash)

cbc_UUID = signedXml.GetChildContent("cbc:UUID")
print("UUID: " + cbc_UUID)

bd = chilkat2.BinData()
success = bd.LoadFile(signedXmlFilePath)
base64Invoice = bd.GetEncoded("base64")
# print(base64Invoice)
# clearance_API(base64Invoice)
json = chilkat2.JsonObject()
json.UpdateString("summary","Standard Invoice")
json.UpdateString("value.invoiceHash",invoiceHash)
json.UpdateString("value.uuid",cbc_UUID)
json.UpdateString("value.invoice",base64Invoice)
http = chilkat2.Http()
http.BasicAuth = True
http.Login = "husna@htsqatar.com"
http.Password = "Husna@1999cd"
# http.AddParam("Custom-Header", "Header-Value")
# http.AddHeader("HeaderName2", "HeaderValue2")
headerr2={"Accept" :"application/json",
           "accept-language": 'en' ,
           "Clearance-Status": '0',
           "Authorization" : "Basic VFVsSlJERnFRME5CTTNsblFYZEpRa0ZuU1ZSaWQwRkJaVFJUYUhOMmVXNDNNREo1VUhkQlFrRkJRamRvUkVGTFFtZG5jV2hyYWs5UVVWRkVRV3BDYWsxU1ZYZEZkMWxMUTFwSmJXbGFVSGxNUjFGQ1IxSlpSbUpIT1dwWlYzZDRSWHBCVWtKbmIwcHJhV0ZLYXk5SmMxcEJSVnBHWjA1dVlqTlplRVo2UVZaQ1oyOUthMmxoU21zdlNYTmFRVVZhUm1ka2JHVklVbTVaV0hBd1RWSjNkMGRuV1VSV1VWRkVSWGhPVlZVeGNFWlRWVFZYVkRCc1JGSlRNVlJrVjBwRVVWTXdlRTFDTkZoRVZFbDVUVVJaZUUxNlJURk5la1V3VG14dldFUlVTVEJOUkZsNFRXcEZNVTE2UlRCT2JHOTNVMVJGVEUxQmEwZEJNVlZGUW1oTlExVXdSWGhFYWtGTlFtZE9Wa0pCYjFSQ1YwWnVZVmQ0YkUxU1dYZEdRVmxFVmxGUlRFVjNNVzlaV0d4b1NVaHNhRm95YUhSaU0xWjVUVkpKZDBWQldVUldVVkZFUlhkcmVFMXFZM1ZOUXpSM1RHcEZkMVpxUVZGQ1oyTnhhR3RxVDFCUlNVSkNaMVZ5WjFGUlFVTm5Ua05CUVZSVVFVczViSEpVVm10dk9YSnJjVFphV1dOak9VaEVVbHBRTkdJNVV6UjZRVFJMYlRkWldFb3JjMjVVVm1oTWEzcFZNRWh6YlZOWU9WVnVPR3BFYUZKVVQwaEVTMkZtZERoREwzVjFWVms1TXpSMmRVMU9ielJKUTB0cVEwTkJhVmwzWjFselIwRXhWV1JGVVZOQ1ozcERRbWRMVWl0TlNIZDRTRlJCWWtKblRsWkNRVkZOUmtSRmRHRkhSalZaV0hkNVRGUkplazVJZDNwTVZFVjRUV3BOZWsxU09IZElVVmxMUTFwSmJXbGFVSGxNUjFGQ1FWRjNVRTE2VFhoTlZGbDVUMFJaTlU1RVFYZE5SRUY2VFZFd2QwTjNXVVJXVVZGTlJFRlJlRTFVUVhkTlVrVjNSSGRaUkZaUlVXRkVRV2hoV1ZoU2FsbFRRWGhOYWtWWlRVSlpSMEV4VlVWRWQzZFFVbTA1ZGxwRFFrTmtXRTU2WVZjMWJHTXpUWHBOUWpCSFFURlZaRVJuVVZkQ1FsTm5iVWxYUkRaaVVHWmlZa3RyYlZSM1QwcFNXSFpKWWtnNVNHcEJaa0puVGxaSVUwMUZSMFJCVjJkQ1VqSlpTWG8zUW5GRGMxb3hZekZ1WXl0aGNrdGpjbTFVVnpGTWVrSlBRbWRPVmtoU09FVlNla0pHVFVWUFoxRmhRUzlvYWpGdlpFaFNkMDlwT0haa1NFNHdXVE5LYzB4dWNHaGtSMDVvVEcxa2RtUnBOWHBaVXpsRVdsaEtNRkpYTlhsaU1uaHpUREZTVkZkclZrcFViRnBRVTFWT1JreFdUakZaYTA1Q1RGUkZkVmt6U25OTlNVZDBRbWRuY2tKblJVWkNVV05DUVZGVFFtOUVRMEp1VkVKMVFtZG5ja0puUlVaQ1VXTjNRVmxhYVdGSVVqQmpSRzkyVEROU2VtUkhUbmxpUXpVMldWaFNhbGxUTlc1aU0xbDFZekpGZGxFeVZubGtSVloxWTIwNWMySkRPVlZWTVhCR1lWYzFNbUl5YkdwYVZrNUVVVlJGZFZwWWFEQmFNa1kyWkVNMWJtSXpXWFZpUnpscVdWZDRabFpHVG1GU1ZXeFBWbXM1U2xFd1ZYUlZNMVpwVVRCRmRFMVRaM2hMVXpWcVkyNVJkMHQzV1VsTGQxbENRbEZWU0UxQlIwZElNbWd3WkVoQk5reDVPVEJqTTFKcVkyMTNkV1Z0UmpCWk1rVjFXakk1TWt4dVRtaE1NamxxWXpOQmQwUm5XVVJXVWpCUVFWRklMMEpCVVVSQloyVkJUVUl3UjBFeFZXUktVVkZYVFVKUlIwTkRjMGRCVVZWR1FuZE5RMEpuWjNKQ1owVkdRbEZqUkVGNlFXNUNaMnR5UW1kRlJVRlpTVE5HVVc5RlIycEJXVTFCYjBkRFEzTkhRVkZWUmtKM1RVTk5RVzlIUTBOelIwRlJWVVpDZDAxRVRVRnZSME5EY1VkVFRUUTVRa0ZOUTBFd1owRk5SVlZEU1ZGRVQxQXdaakJFY21oblpVUlVjbFpNZEVwMU9HeFhhelJJU25SbFkyWTFabVpsVWt4blpVUTRZMlZWWjBsblpFSkNUakl4U1RNM2FYTk5PVlZ0VTFGbE9IaFNjRWh1ZDA5NFNXYzNkMDR6V1RKMlZIQnpVR2hhU1QwPTpFcGo2OUdoOFRNTXpZZktsdEx2MW9tWktyaWUwc1A2TEF2YW1iUUZIVGd3PQ==",
           "Content-Type":"application/json",
           "Accept-Version":"V2"}
resp = http.PostJson3("https://gw-fatoora.zatca.gov.sa/e-invoicing/developer-portal/compliance/invoices","application/json",json,headerr2)
if (http.LastMethodSuccess == False):
    print(http.LastErrorText)
    sys.exit()
statusCode = resp.StatusCode
print("Response status code = " + str(statusCode))
jsonResp = chilkat2.JsonObject()
resp.GetBodyJson(jsonResp)
jsonResp.EmitCompact = False
print("JSON Response:")







